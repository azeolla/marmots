#!/usr/bin/env python3

if __name__ == "__main__":

    import argparse

    # create the argument parser
    parser = argparse.ArgumentParser(
        description=("Plot the integrated geometric area " " of a given BEACON prototype.")
    )
    parser.add_argument(
        "--Enu",
        type=float,
        required=True,
        help="The energy of the primary neutrino [EeV].",
    )
    parser.add_argument(
        "--antennas",
        type=int,
        default=10,
        help="The number of antennas per station (10)."
    )
    parser.add_argument(
        "--stations",
        type=str,
        default=None,
        help="The file containing the lat, lon, altitude, and orientation of each station.",
    )
    parser.add_argument(
        "--nside",
        type=int,
        default=16,
        help="Changes the resolution of the skymap.",
    )
    parser.add_argument(
        "--ntrials",
        type=int,
        required=True,
        help="The number of MC trials per elevation angle.",
    )
    parser.add_argument(
        "--bandwidth",
        type=int,
        nargs=2,
        default=[30, 80],
        help="The range of frequencies ((30,80))) [MHz]."
    )
    parser.add_argument(
        "--trigger",
        type=float,
        default=5.0,
        help="The SNR trigger threshold (5)."
    )
    parser.add_argument(
        "--max-view",
        type=float,
        default=3.0,
        help="The maximum view angle for trials (3.0) [degrees].",
    )
    parser.add_argument(
        "--fov",
        type=float,
        default=120,
        help="The field of view of a station (120) [degrees]."
    )
    parser.add_argument(
        "--save-plot",
        type=str,
        default=None,
        help="The filename to save the plot into.",
    )
    parser.add_argument(
        "--save", type=str, default=None, help="The directory to save the data into."
    )
    parser.add_argument(
        "--num-cpus",
        type=int,
        default=1,
        help="The number of CPU cores to use."
    )

    # parse the args
    args = parser.parse_args()

import healpy as hp
from p_tqdm import p_map
import numpy as np
import astropy.units as u
import astropy.coordinates as coordinates
import marmots.effective_area as effective_area
from marmots.tauexit import TauExitLUT
from marmots.efield import EFieldParam
import matplotlib.pyplot as plt
from astropy.time import Time


# the number of pixels in the healpy skymap, determined by nside
npix = hp.nside2npix(args.nside)

# the location of each pixel
theta, phi = np.degrees(hp.pix2ang(nside=args.nside, ipix = np.arange(npix)))

dec = (90 - theta)*u.deg
ra = phi*u.deg

stations = np.loadtxt(args.stations).T

lat = stations[0]*u.deg
lon = stations[1]*u.deg
altitude = stations[2]*u.km
orientations = stations[3]*u.deg
fov = stations[4]*u.deg

# the location of the BEACON stations
beacon = coordinates.EarthLocation(
    lat=lat,
    lon=lon,
    height=altitude,
)

time = Time('2022-7-18 12:00:00') - 4*u.hour

freqs = np.arange(args.bandwidth[0], args.bandwidth[1], 10)+5

# load the corresponding tau exit LUT
Enu = args.Enu * 1e18
tauexit = TauExitLUT(energy=Enu, thickness=0)

# load the field parameterization.
voltage = EFieldParam()

def pix_loop(i):
    source = coordinates.SkyCoord(ra=ra[i], dec=dec[i], frame='icrs')
    altaz = source.transform_to(coordinates.AltAz(obstime=time,location=beacon))

    geo = source.transform_to(coordinates.ITRS(obstime=time))
    geo.representation_type = 'spherical'

    # calculate the effective area
    results = effective_area.calculate(
        geo,
        altaz,
        beacon,
        orientations,
        fov,
        tauexit,
        voltage,
        np.radians(args.max_view)*u.rad,
        args.ntrials,
        args.antennas,
        freqs,
        args.trigger,
    )

    return results

results = p_map(pix_loop, np.arange(npix), **{"num_cpus": args.num_cpus})

results = np.array(results).T

geometric = results[0]
pexit = results[1]
pdet = results[2]
effective = results[3]

average = np.zeros(effective.size)
for i in range(359):
    r = hp.Rotator(coord=['E'], rot=[i,0,0])
    m2 = r.rotate_map_pixel(effective)
    average += m2
average /= 360

# and save the plot if desired
if args.save:
    
    hp.write_map(args.save+"geometric.FITS", geometric, overwrite=True)
    hp.write_map(args.save+"pexit.FITS", pexit, overwrite=True)
    hp.write_map(args.save+"pdet.FITS", pdet, overwrite=True)
    hp.write_map(args.save+"effective.FITS", effective, overwrite=True)
    hp.write_map(args.save+"average.FITS", average, overwrite=True)

# if we want to save the plot
if args.save_plot:

    hp.projview(
    effective,
    coord=["E"],
    graticule=True,
    graticule_labels=True,
    unit=r"Geometric Area [$km^2$]",
    xlabel=r"Right Ascension [$^\circ$]",
    ylabel=r"Declination [$^\circ$]",
    cb_orientation="horizontal",
    projection_type="mollweide",
    )

    # save the figure
    plt.savefig(args.save_plot)

    plt.close()